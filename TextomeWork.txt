Основные скрипты по домашнему заданию "Транзакции и уровни изоляции" представлены в проекте по ссылке:
https://github.com/gig74/HomeWorkTransaction/
Описание скриптов sql дано в  README.md .
Домашнее задание выполнялось на БД PostgreSQL .
В домашнем задании по теме "Транзакции и уровни изоляции" выполнено:
- создана БД BankTransactionsDB, необходимые таблицы с ограничениями, а также начальное заполнение таблицы для дальнейших экспериментов
- написаны две транзакции в соответствии с заданием
- путём пошагового выполнения Транзакции 2 и выполнения на каждом шаге в другой сессии выборок проанализировано поведение при различных уровнях изоляции
Результат анализа:
- при транзакциях READ UNCOMMITTED и READ COMMITTED получился идентичный результат - изменения данных видны только после COMMIT в основной сессии.
В документации так же указано что конкретно в PostgreSQL эти уровни идентичны (в PostgreSQL нет "грязного чтения").
- при транзакции REPEATABLE READ результат SELECT "фиксируется" при первом обращении и не меняется независимо от закомиченных изменений в других сессиях.
При попытке заблокировать изменённую(и закомиченную) в другой сессии строку - выдаёт ошибку "ERROR:  не удалось сериализовать доступ из-за параллельного изменения."

Для банковской сферы по моему мнению наиболее оптимален уровень изоляции READ COMMITTED (дополнительно с использованием механизмов блокировок для обеспечения целостности данных).
Данный режим не позволяет видеть недостоверные (незакомиченные) данные и не требует значительных ресурсов, что актуально для высоконагруженных систем.